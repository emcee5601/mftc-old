name: Deploy latest few tagged versions of MFTC into their own versioned paths
run-name: ${{ github.actor }} deploying all version of MFTC
on:
  workflow_dispatch:
  schedule:
    - cron: '7 6 * * *'

jobs:
  get-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.versions.outputs.versions }}
    steps:
      - name: checkout main
        uses: actions/checkout@v4
      - name: checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
      - name: get the last few mftc versions as json array
        id: versions
        run: |
          LAST_N_VERSIONS=$(git ls-remote --tags --sort -version:refname https://github.com/emcee5601/fit-test-console.git | cut -f3 -d/ | head -10)
          ALREADY_DEPLOYED_VERSIONS=$(ls -1 gh-pages/ | grep -e '^v')
          # only want versions not already deployed
          NEW_VERSIONS=$(printf "%s\n%s" "$LAST_N_VERSIONS" "$ALREADY_DEPLOYED_VERSIONS"  | sort | uniq -c | grep -e '^\s*1' | awk '{print $2}')
          VERSIONS=$(echo ${NEW_VERSIONS} | jq -ncR '[inputs]')
          echo "versions=${VERSIONS}" >> "$GITHUB_OUTPUT"
  build-versions:
    runs-on: ubuntu-latest
    needs: get-versions
    strategy:
      matrix:
        version: ${{ fromJSON(needs.get-versions.outputs.versions) }}
    steps:
      - name: checkout this repo
        uses: actions/checkout@v4
      - name: enable corepack
        run: corepack enable
      - name: create an empty branch
        run: git switch --orphan mftc-${{ matrix.version }}
      - name: fetch the version of mftc we want
        run: git fetch https://github.com/emcee5601/fit-test-console.git ${{ matrix.version }}
      - name: materialize files
        run: git checkout FETCH_HEAD
      - name: install deps
        run: yarn install
      - name: build
        run: yarn build
      - name: upload artifact for ${{ matrix.version }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.version }}
          path: dist/
          retention-days: 1
  deploy-gh-pages:
    runs-on: ubuntu-latest
    needs: build-versions
    permissions:
      contents: write
    steps:
      - name: checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
      - name: checkout main
        uses: actions/checkout@v4
      - name: download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: copy versions already deployed to gh-pages
        run: |
          if git show-ref refs/heads/gh-pages
          then
            git switch gh-pages
            mv v* dist/
            git switch main  # back to main so we have access to ./scripts/
          fi
      - name: create index file
        run: ./scripts/create-index.sh
      - name: make sure package.json exists to avoid npx not being able to find cache dir
        run: |
          touch package.json
      - name: Deploy with gh-pages
        run: |
          git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          npx gh-pages -d dist -u "github-actions-bot <support+actions@github.com>"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

