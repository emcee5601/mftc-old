name: Deploy latest few tagged versions of MFTC into their own versioned paths
run-name: ${{ github.actor }} deploying all version of MFTC
on:
  workflow_dispatch:
  schedule:
    - cron: '7 6 * * *'

jobs:
  get-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.versions.outputs.versions }}
    steps:
      - name: checkout main
        uses: actions/checkout@v4
      - name: checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          # only need version directories
          sparse-checkout: |
            v*
            manifest.webmanifest
          sparse-checkout-cone-mode: false
          path: gh-pages
      - name: check if web manifest exists
        if: ${{ hashFiles('manifest.webmanifest') != '' }}
        run: |
          echo "'manifest.webmanifest' found in the gh-pages branch. It seems we're deploying a single instance only."

      # TODO: determine old versions in the first job. since we have to not build any old version (since we would have previously deleted it, or will schedule it for deletion in the deploy job below
      - name: get the last few mftc versions as json array if there is no web manifest or if triggered manually
        if: ${{ hashFiles('manifest.webmanifest') == '' || github.event_name == 'workflow_dispatch'}}
        id: versions
        run: |
          ALL_VERSIONS=$(git ls-remote --tags --sort -version:refname https://github.com/emcee5601/fit-test-console.git | cut -f3 -d/ )
          ALREADY_DEPLOYED_VERSIONS=$(ls -1 gh-pages/ | grep -e '^v')
          # only want versions not already deployed
          NEW_VERSIONS=$(printf "%s\n%s" "$ALL_VERSIONS" "$ALREADY_DEPLOYED_VERSIONS"  | sort | uniq -c | grep -e '^\s*1' | awk '{print $2}')

          echo "All versions: ${ALL_VERSIONS}"
          echo "Already deployed versions: ${ALREADY_DEPLOYED_VERSIONS}"

          if [ -z "${NEW_VERSIONS}" ]
          then
            echo "There are no new versions to deploy. The rest of the jobs in this workflow should be skipped."
            echo "versions=" >> "$GITHUB_OUTPUT"
          else
            echo "New versions to build: '${NEW_VERSIONS}'"
            VERSIONS=$(echo "${NEW_VERSIONS}" | jq -ncR '[inputs]')
            echo "versions=${VERSIONS}" >> "$GITHUB_OUTPUT"
          fi

  build-versions:
    if: needs.get-versions.outputs.versions != ''
    runs-on: ubuntu-latest
    needs: get-versions
    strategy:
      matrix:
        version: ${{ fromJSON(needs.get-versions.outputs.versions) }}
    steps:
      - name: checkout this repo
        uses: actions/checkout@v4
      - name: enable corepack
        run: corepack enable
      - name: create an empty branch
        run: git switch --orphan mftc-${{ matrix.version }}
      - name: fetch the version of mftc we want
        run: git fetch https://github.com/emcee5601/fit-test-console.git ${{ matrix.version }}
      - name: materialize files
        run: git checkout FETCH_HEAD
      - name: install deps
        run: yarn install
      - name: build
        run: yarn build
      - name: upload artifact for ${{ matrix.version }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.version }}
          path: dist/
          retention-days: 1
  deploy-gh-pages:
    if: needs.get-versions.outputs.versions != ''
    runs-on: ubuntu-latest
    needs:
      - build-versions
      - get-versions
    permissions:
      contents: write
    steps:
      - name: checkout main
        uses: actions/checkout@v4
      - name: checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: dist
      - name: download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: remove really old versions if we have more than 10 version
        run: |
          if [ $(ls -1d v* | wc -l) -gt 10 ]
          then
            # remove anything more than 180 days old
            OLD_VERSIONS=$(\ls -1d v* | xargs -I{} -n1 -P1 sh -c 'echo {} $( if [ $(( ($(date +%s) -  $(git log --follow --max-count=1 --format=%at {})) / (24*3600) )) -gt 180 ]; then echo oldish; else echo newish; fi )' | grep oldish | cut -f1 -d\)
            if [ ! -z "$OLD_VERSIONS" ]
            then
              rm -rf $OLD_VERSIONS
            fi
          fi
      - name: create index file
        run: ./scripts/create-index.sh
      - name: make sure package.json exists to avoid npx not being able to find cache dir
        run: |
          touch package.json
      - name: Deploy with gh-pages
        run: |
          git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          npx gh-pages -d dist -u "github-actions-bot <support+actions@github.com>"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

